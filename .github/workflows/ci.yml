name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black pytest
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check .
    
    - name: Validate configuration files
      run: |
        python -c "
import yaml
with open('config/test_config.yaml', 'r') as f:
    yaml.safe_load(f)
with open('config/models_config.yaml', 'r') as f:
    yaml.safe_load(f)
print('Configuration files are valid')
"
    
    - name: Test imports
      run: |
        python -c "
from utils.bedrock_client import BedrockClient
from utils.metrics_collector import MetricsCollector
from utils.report_generator import ReportGenerator
print('All imports successful')
"
    
    - name: Run basic tests (without AWS)
      run: |
        python -c "
import json
from utils.metrics_collector import MetricsCollector

# Test metrics collector
metrics = MetricsCollector()
metrics.record_request('test', 1.0, True, 100, 200, 0.01)
summary = metrics.get_performance_summary()
assert summary is not None
print('Basic functionality tests passed')
"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security checks
      run: |
        # Check for hardcoded secrets
        if grep -r "aws_access_key_id\|aws_secret_access_key" --exclude-dir=.git .; then
          echo "Found potential hardcoded AWS credentials"
          exit 1
        fi
        
        # Check for other sensitive patterns
        if grep -r "password\|secret\|token" --include="*.py" --include="*.yaml" --exclude-dir=.git . | grep -v "# " | grep -v "password.*=.*input\|token.*=.*input"; then
          echo "Found potential hardcoded secrets"
          exit 1
        fi
        
        echo "Security checks passed"
